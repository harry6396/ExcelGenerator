/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package comparisonexcel;

import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.JOptionPane;
import org.apache.poi.hssf.usermodel.HSSFWorkbook; 
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet; 
import org.apache.poi.ss.usermodel.Workbook; 
/**
 *
 * @author Prabhat
 */
public class Utility extends javax.swing.JFrame {

    /**
     * Creates new form Utility
     */
    public Utility() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        pathInput = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox12 = new javax.swing.JCheckBox();
        jCheckBox13 = new javax.swing.JCheckBox();
        jCheckBox15 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        pathInput2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        o1 = new javax.swing.JTextField();

        jTextField2.setText("jTextField2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);

        pathInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathInputActionPerformed(evt);
            }
        });

        jLabel1.setText("Old Assets Path");

        jLabel2.setText("Image Type");

        jCheckBox1.setText("mp4");

        jCheckBox2.setText("m4a");

        jCheckBox3.setText("jpeg");

        jCheckBox4.setText("webm");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        jLabel3.setText("Video Type");

        jCheckBox7.setText("png");

        jCheckBox8.setText("jpg");

        jLabel4.setText("Text Type");

        jCheckBox6.setText("txt");

        jCheckBox12.setText("doc");

        jCheckBox13.setText("tsv");

        jCheckBox15.setText("xlsx");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBox7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox3))
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBox6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox15)))
                .addContainerGap(138, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox7)
                    .addComponent(jCheckBox8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox6)
                    .addComponent(jCheckBox12)
                    .addComponent(jCheckBox13)
                    .addComponent(jCheckBox15))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Generate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel13.setText("New Assets Path");

        jLabel5.setText("Output path");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(71, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(49, 49, 49))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pathInput2, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                    .addComponent(pathInput))
                .addGap(19, 19, 19))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(o1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(168, 168, 168))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jButton1)
                            .addGap(310, 310, 310)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathInput, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathInput2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(o1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addComponent(jButton1)
                .addGap(71, 71, 71))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pathInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pathInputActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        ArrayList<FileProperty> oldFileList = new ArrayList<FileProperty>();
        ArrayList<FileProperty> newFileList = new ArrayList<FileProperty>();
        
        String oldPathFile = pathInput.getText();
        String newPathFile = pathInput2.getText(); 
        
        File oldFilePath = new File(oldPathFile);
        Utility.listDirectory(oldFilePath, oldFileList);
        Collections.sort(oldFileList,new FileComparator());
        
        File newFilePath = new File(newPathFile);
        Utility.listDirectory(newFilePath, newFileList);
        Collections.sort(newFileList,new FileComparator());
        
        ArrayList <String>fileName = new ArrayList<String>();
        ArrayList <String>fileExtension = new ArrayList<String>();
        
        String outputPath = o1.getText();
        
        String selectedType="";
        
        if(jCheckBox7.isSelected()){
            selectedType+=",png";
        }
        if(jCheckBox8.isSelected()){
            selectedType+=",jpg";
        }
        if(jCheckBox3.isSelected()){
            selectedType+=",jpeg";
        }
        
        if(!selectedType.equals("")){
            fileName.add(selectedType);
            fileExtension.add("Image");
            selectedType="";
        }
        
        if(jCheckBox1.isSelected()){
            selectedType+=",mp4";
        }
        if(jCheckBox2.isSelected()){
            selectedType+=",m4a";
        }
        if(jCheckBox4.isSelected()){
            selectedType+=",webm";
        }
        
        if(!selectedType.equals("")){
            fileName.add(selectedType);
            fileExtension.add("Video");
            selectedType="";
        }
        
        if(jCheckBox6.isSelected()){
            selectedType+=",txt";
        }
        if(jCheckBox12.isSelected()){
            selectedType+=",doc,docx";
        }
        if(jCheckBox13.isSelected()){
            selectedType+=",tsv";
        }
        if(jCheckBox15.isSelected()){
            selectedType+=",xlsx,xls";
        }
        
        if(!selectedType.equals("")){
            fileName.add(selectedType);
            fileExtension.add("Text");
            selectedType="";
        }
                
        try {
            if(fileName.size()>0){
                Utility.saveExcelFile(oldFileList, newFileList, fileName, fileExtension, outputPath);
            }
            else{
                JOptionPane.showMessageDialog(null, "Please select media type");
                System.out.println("Please select appropriate media type");
            }
        } catch (IOException ex) {
            System.out.println("Unable to create an Excel file"+ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    class FileComparator implements Comparator<FileProperty> {
    public int compare(FileProperty o1, FileProperty o2) {
        int value1 = o1.filePath.compareTo(o2.filePath);
        return value1;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Utility.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Utility.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Utility.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Utility.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Utility().setVisible(true);
            }
        });
    }
    
    public static void listDirectory(File file, ArrayList<FileProperty> fileList ) {
        int i = file.getPath().lastIndexOf('.');
        if(file.isDirectory()) {
            File[] files = file.listFiles();
            for(File currFile : files) {
                listDirectory(currFile, fileList);
            }
        }
        else {
            FileProperty fileProperty = new FileProperty();
            fileProperty.filePath = file.getPath();
            fileProperty.fileName = file.getName();
            fileProperty.fileSize = file.length()/(1024);
            fileProperty.fileExtension = file.getPath().substring(i+1);
            fileProperty.fileRelativePath = file.getParentFile().toString();
            fileList.add(fileProperty);
        }
    }
    
    public static void saveExcelFile(ArrayList<FileProperty> oldFileList, ArrayList<FileProperty> newFileList, ArrayList<String> fileName, ArrayList<String> fileExtension, String outputPath ) throws FileNotFoundException, IOException{
        
        // Creating Workbook instances 
        Workbook wb = new HSSFWorkbook(); 
        // An output stream accepts output bytes and sends them to sink. 
        
        //OutputStream fileOut = new FileOutputStream("/Users/admin/Desktop/KitkitSchool.xls"); 
        OutputStream fileOut = new FileOutputStream(outputPath);
        Sheet []sheet1 = new Sheet[fileExtension.size()];
        // Creating Sheets using sheet object 
        for(int iFileCounter=0; iFileCounter<fileExtension.size();iFileCounter++){
        sheet1[iFileCounter] = wb.createSheet(fileExtension.get(iFileCounter));
        String filterCondition="";
        switch(fileExtension.get(iFileCounter)){
            case "Image":
                filterCondition = fileName.get(iFileCounter);
                break;
            case "Video":
                filterCondition = fileName.get(iFileCounter);
                break;
            case "Text":
                filterCondition = fileName.get(iFileCounter);
                break;
        }
        Row row = sheet1[iFileCounter].createRow(1); 
        Cell cell = row.createCell(1);
        cell.setCellValue("File Name");
        cell = row.createCell(2); 
        cell.setCellValue("Old File path");
        cell = row.createCell(3); 
        cell.setCellValue("New File path");
        cell = row.createCell(4); 
        cell.setCellValue("File Type");
        cell = row.createCell(5); 
        cell.setCellValue("Old file size");
        cell = row.createCell(6); 
        cell.setCellValue("New file size");
        cell = row.createCell(7); 
        cell.setCellValue("Difference in file");
        
        int rowCount=3;
        for(int iCounter=0;iCounter<oldFileList.size();iCounter++){
            if(filterCondition.contains(oldFileList.get(iCounter).fileExtension)){
            row = sheet1[iFileCounter].createRow(rowCount);
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(oldFileList.get(iCounter).fileName);
            cell1 = row.createCell(2);
            cell1.setCellValue(oldFileList.get(iCounter).filePath);
            cell1 = row.createCell(3);
            cell1.setCellValue(newFileList.get(iCounter).filePath);
            cell1 = row.createCell(4);
            cell1.setCellValue(oldFileList.get(iCounter).fileExtension);
            cell1 = row.createCell(5);
            cell1.setCellValue(oldFileList.get(iCounter).fileSize);
            cell1 = row.createCell(6);
            cell1.setCellValue(newFileList.get(iCounter).fileSize);
            cell1 = row.createCell(7);
            boolean isDifference = oldFileList.get(iCounter).fileSize == newFileList.get(iCounter).fileSize?false:true;
            cell1.setCellValue(isDifference);
            rowCount++;
                }
            }
        }
        wb.write(fileOut); 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox15;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField o1;
    private javax.swing.JTextField pathInput;
    private javax.swing.JTextField pathInput2;
    // End of variables declaration//GEN-END:variables
}
